spring:
  application:
    name: notification-service
---
debug: false

server:
  port: 8010
  error:
    include-message: always
    include-binding-errors: always
    include-stacktrace: ON_PARAM
    include-exception: false
---
rabbitmq:
  port: 5672
  host: localhost
  username: guest
  password: guest
  # make the provider ensures that the message is pushed to
  # the exchange and that it will call back whether it succeeds or not
  publisher-confirm-type: correlated
  # ensure that the switch can push messages to the queue
  publisher-returns: true
  virtual-host: /
  # ensure that the consumer will consume the message and manually confirm
  listener:
    simple:
      acknowledge-mode: manual
  # Defines the policy for when message routing fails.
  # true, call ReturnCallback; false: discard the message directly
  template:
    mandatory: true
---
management:
  endpoints:
    web:
      exposure:
        include:
          - info
          - mappings
          - health
          - prometheus
          - refresh
  endpoint:
    health:
      probes:
        enabled: true
      show-details: always
    mappings:
      enabled: true
    prometheus:
      enabled: true
---
schedule:
  cron:
    daytime: "0 0 10 * * *"
---
secrets:
  slack:
    oAuth:
      token: ${SLACK_OAUTH_TOKEN:xoxb-4864126479907-4864138830547-wsPTOuIR2hYmR8HCRMnXJhEN}
---
  webhook:
    default:
      url: https://webhook.site/1e2208c6-083e-48a0-ad31-73d943599f1d